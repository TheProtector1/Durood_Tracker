// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  displayName String?
  avatar     String?

  // Email verification
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?

  // Durood entries
  duroodEntries DuroodEntry[]

  // Daily rankings
  dailyRankings DailyRanking[]

  // Prayer completions
  prayerCompletions PrayerCompletion[]

  // New features
  dailySpins DailySpin[]
  userLevel UserLevel?
  goalTimerSessions GoalTimerSession[]
  duaFavorites DuaFavorite[]

  @@map("users")
}

model DuroodEntry {
  id        String   @id @default(cuid())
  userId    String
  date      String   // Format: YYYY-MM-DD
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure only one entry per user per date
  @@unique([userId, date])
  @@map("durood_entries")
}

model DailyRanking {
  id        String   @id @default(cuid())
  date      String   // Format: YYYY-MM-DD
  userId    String
  username  String   // Store username for faster queries
  displayName String?
  count     Int
  rank      Int
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint
  @@unique([date, userId])
  @@map("daily_rankings")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model TotalCounter {
  id        String   @id @default("global")
  total     Int      @default(0)
  updatedAt DateTime @updatedAt

  @@map("total_counter")
}

model PrayerCompletion {
  id        String   @id @default(cuid())
  userId    String
  date      String   // Format: YYYY-MM-DD
  prayerName String  // fajr, dhuhr, asr, maghrib, isha
  completed Boolean  @default(false)
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure only one completion record per user per prayer per date
  @@unique([userId, date, prayerName])
  @@map("prayer_completions")
}

model AuthenticPrayerTimes {
  id        String   @id @default(cuid())
  city      String   // City name (e.g., "Islamabad", "Lahore")
  date      String   // Format: YYYY-MM-DD
  fajr      String   // Prayer time in 24-hour format (HH:MM)
  dhuhr     String   // Prayer time in 24-hour format (HH:MM)
  asr       String   // Prayer time in 24-hour format (HH:MM)
  maghrib   String   // Prayer time in 24-hour format (HH:MM)
  isha      String   // Prayer time in 24-hour format (HH:MM)
  method    String   // Calculation method (e.g., "ISNA", "Karachi")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure only one entry per city per date
  @@unique([city, date])
  @@map("authentic_prayer_times")
}

model DailySpin {
  id        String   @id @default(cuid())
  userId    String
  date      String   // Format: YYYY-MM-DD
  goal      Int      // Daily goal value
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure only one spin per user per date
  @@unique([userId, date])
  @@map("daily_spins")
}

model UserLevel {
  id        String   @id @default(cuid())
  userId    String   @unique
  level     Int      @default(1) // 1-5 (Bronze to Platinum)
  points    Int      @default(0)
  title     String   @default("Bronze") // Bronze, Silver, Gold, Diamond, Platinum
  jumuahBadge Boolean @default(false) // Special Friday badge
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_levels")
}

model GoalTimerSession {
  id        String   @id @default(cuid())
  userId    String
  date      String   // Format: YYYY-MM-DD
  duration  Int      // Duration in seconds (300 = 5 minutes)
  completed Boolean  @default(false)
  startedAt DateTime
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goal_timer_sessions")
}

model Dua {
  id            String   @id @default(cuid())
  title         String   // Title in English
  category      String   // morning, evening, travel, protection, etc.
  arabic        String   // Arabic text
  urdu          String   // Urdu translation
  english       String   // English translation
  transliteration String? // Romanized Arabic (optional)
  reference     String?  // Hadith/Quran reference
  audioUrl      String?  // Optional audio file URL
  isActive      Boolean  @default(true)
  order         Int      @default(0) // For sorting
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  favorites DuaFavorite[]

  @@map("duas")
}

model DuaFavorite {
  id        String   @id @default(cuid())
  userId    String
  duaId     String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  dua  Dua  @relation(fields: [duaId], references: [id], onDelete: Cascade)

  // Ensure one favorite per user per dua
  @@unique([userId, duaId])
  @@map("dua_favorites")
}

